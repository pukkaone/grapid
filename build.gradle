rootProject.version = readVersion()

// Gets version from Git tag.
def readVersion() {
  def output = new StringBuilder()
  def error = new StringBuilder()
  'git describe --dirty'.execute().waitForProcessOutput(output, error)
  def version = output.toString().trim()
  if (version.isEmpty()) {
    println error
    version = 'UNKNOWN'
  } else if (version.endsWith('-dirty') || version ==~ /.*-\d+-g[0-9a-f]+/) {
    // Assign version for work in progress.
    version = '999-SNAPSHOT'
  }
  println "Version ${version}"
  return version
}

subprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'java-library'
  apply plugin: 'maven'
  apply plugin: 'signing'

  group = 'com.github.pukkaone'
  version = rootProject.version

  repositories {
    mavenLocal()
    jcenter()
  }

  ext {
    lombokVersion = '1.18.8'
    springBootVersion = '2.1.9.RELEASE'
    springFrameworkVersion = '5.1.10.RELEASE'

    isUploadArchivesEnabled =
        project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
  }

  dependencies {
    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
  }

  sourceCompatibility = JavaVersion.VERSION_11

  checkstyle {
    toolVersion = '8.24'
  }

  test {
    useJUnitPlatform()
  }

  jar {
    manifest {
      attributes(
          'Automatic-Module-Name': "${project.group}.${project.name}".replace('-', '.'),
          'Implementation-Version': project.version)
    }
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar
    archives sourcesJar
  }

  signing {
    required { isUploadArchivesEnabled }
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          if (isUploadArchivesEnabled) {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
          }
        }

        pom.project {
          name project.name
          url 'https://github.com/pukkaone/grapid'

          licenses {
            license {
              name 'Apache License, Version 2.0'
              url 'https://www.apache.org/licenses/LICENSE-2.0'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'pukkaone'
              name 'Chin Huang'
            }
          }

          scm {
            connection 'scm:git:git@github.com:pukkaone/grapid.git'
            developerConnection 'scm:git:git@github.com:pukkaone/grapid.git'
            url 'https://github.com/pukkaone/grapid'
          }
        }
      }
    }
  }

  afterEvaluate { project ->
    uploadArchives.repositories.mavenDeployer.pom.project {
      description project.description
    }
  }
}
