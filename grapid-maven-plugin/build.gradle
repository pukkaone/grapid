import groovy.xml.XmlParser

plugins {
  id 'organization.library-convention'
}

description = 'Maven plugin that translates GraphQL schema to Java source code'

ext {
  mavenVersion = '3.8.6'
  mavenPluginVersion = '3.6.4'
}

dependencies {
  implementation project(':grapid-compiler')
  implementation "org.apache.maven:maven-artifact:${mavenVersion}"
  implementation "org.apache.maven:maven-compat:${mavenVersion}"
  implementation "org.apache.maven:maven-plugin-api:${mavenVersion}"
  compileOnly "org.apache.maven.plugin-tools:maven-plugin-annotations:${mavenPluginVersion}"
  implementation 'org.apache.maven.shared:file-management:3.1.0'
}

publishing {
  publications {
    library {
      pom {
        packaging = 'maven-plugin'
        withXml {
          asNode().dependencies.'*'
              .findAll() { it.groupId.text() == 'org.apache.maven' && it.scope.text() == 'runtime' }
              .each { it.scope*.value = 'provided' }
          asNode()
              .append(new XmlParser().parseText("""
  <build>
    <outputDirectory>classes/java/main</outputDirectory>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-plugin-plugin</artifactId>
          <version>${mavenPluginVersion}</version>
          <dependencies>
            <dependency>
              <groupId>org.apache.maven.reporting</groupId>
              <artifactId>maven-reporting-impl</artifactId>
              <version>3.0.0</version>
              <!--
              Do not download vulnerable JAR file so security scan does not find it.
              https://nvd.nist.gov/vuln/detail/CVE-2016-1181
              -->
              <exclusions>
                <exclusion>
                  <groupId>org.apache.struts</groupId>
                  <artifactId>struts-core</artifactId>
                </exclusion>
              </exclusions>
            </dependency>
          </dependencies>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  """))
        }
      }
    }
  }
}

model {
  tasks.generatePomFileForLibraryPublication {
    destination = file("${buildDir}/pom.xml")
  }
}

task generatePluginDescriptor(type: Exec) {
  dependsOn generatePomFileForLibraryPublication
  workingDir buildDir
  commandLine "${rootDir}/mvnw", '--batch-mode', '--errors', 'plugin:descriptor'
}

jar.dependsOn(generatePluginDescriptor)
